Issue #,Title,HTML URL,Date Filed,Status,Closed Date,Labels,Assignees,Milestone,Body Snippet (MRE/Backtrace hint),Linked PRs (URL;Author;Status),Guessed Kind,Guessed CPython Versions,Guessed Configurations
126219,`tkinter.Tk` segfault with invalid `className`,https://github.com/python/cpython/issues/126219,2024-10-31,open,,extension-modules;topic-tkinter;type-crash;3.12;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to crash Python by passing an invalid `className` to `_tkinter.create`, for example:\n```python\nimport  _tkinter \n_tkinter.create(None, '', '\U0010FFFF', None)\n```\n\nOr, using `tkinter.Tk` (repro thanks to @graingert and @JelleZijlstra):\n```python\n% ./python.exe \nPython 3.14.0a0 experimental free-threading build (heads/gh-125331:c315120a535, Oct 30 2024, 11:22:31) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information....",,Segfault/Crash,3.12;3.13;3.14,
126220,`_lsprof.Profiler._creturn_callback()` segfaults,https://github.com/python/cpython/issues/126220,2024-10-31,closed,2024-11-06,extension-modules;type-crash;3.12;3.13;3.14,sobolevn,,"# Crash report\n\n### What happened?\n\nIt's possible to crash Python by simply calling the `._creturn_callback()` or the `._ccall_callback()` methods of the `Profiler` class in either `_lsprof` or `cProfile`.\n\n```python\nfrom _lsprof import Profiler\nProfiler()._creturn_callback()\nProfiler()._ccall_callback()\n```\n\nBacktrace looks like:\n```gdb\nProgram received signal SIGSEGV, Segmentation fault....",,Segfault/Crash,3.12;3.13;3.14,
126221,`sre_constants._makecodes` segfaults in JIT builds,https://github.com/python/cpython/issues/126221,2024-10-31,closed,2024-10-31,interpreter-core;type-crash;topic-JIT,,,"# Crash report\n\n### What happened?\n\nIt's possible to crash a JIT build of Python (or abort, if it's a debug build) by passing an invalid parameter to `sre_constants._makecodes`:\n\n```python\nimport sre_constants\nsre_constants._makecodes("""", {}, 10)\n```\n\nBacktrace on non-debug JIT build looks like:\n```gdb\nProgram received signal SIGSEGV, Segmentation fault.\n_PyEval_EvalFrameDefault (tstate=0x555555b3f440 <_PyRuntime+313216>, frame=0x7ffff7fb0098, throwflag=<optimized out>) at Python/generated_cases.c.h:6753...",,Segfault/Crash,,
126223,`SystemError` caused by `_interpreters.create()` with invalid unicode argument,https://github.com/python/cpython/issues/126223,2024-10-31,closed,2024-10-31,type-bug;extension-modules;topic-subinterpreters;3.13;3.14,,,"# Bug report\n\n### Bug description:\n\nIt's possible to make a debug build of Python abort by passing an invalid Unicode argument to `_interpreters.create()`, resulting in `SystemError: <built-in function create> returned a result with an exception set`.\n\n```python\n$ ./python -c ""import _interpreters; _interpreters.create('\udc80')""\nFatal Python error: _Py_CheckFunctionResult: a function returned a result with an exception set\nPython runtime state: initialized\nUnicodeEncodeError: 'utf-8' codec can't encode character '\udc80' in position 0: surrogates not allowed\n\nThe above exception was the direct cause of the following exception:\n\nSystemError: <built-in function create> returned a result with an exception set...",,SystemError,3.13;3.14,
126312,GC aborts in debug no-gil build,https://github.com/python/cpython/issues/126312,2024-11-01,closed,2024-11-15,extension-modules;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nIn debug no-gil builds with `PYTHON_GIL=0`, it's possible to trigger the three assertions here with simple code:\nhttps://github.com/python/cpython/blob/c84a136511c673f495f466887716b55c13b7e3ac/Python/gc_free_threading.c#L550-L558\n\nFor this code:\n```python\nimport gc\ngc.freeze()\ngc.is_finalized(lambda: None)\ngc.collect()\ngc.unfreeze()\ngc.collect()...",,Abort/AssertionError,3.13;3.14,
126313,`curses.napms()` aborts with a `SystemError`,https://github.com/python/cpython/issues/126313,2024-11-01,closed,2024-11-04,extension-modules;type-crash;3.13;3.14,picnixz,,"# Crash report\n\n### What happened?\n\nThe abort happens on normal and no-gil debug builds, release builds also hit the `SystemError`.\n\n```python\nimport curses\ncurses.napms(37)\n```\n\nError is:\n```\nFatal Python error: _Py_CheckFunctionResult: a function returned a result with an exception set\nPython runtime state: initialized...",,Abort/AssertionError,3.13;3.14,
126314,Running `tracemalloc` in threads segfaults on no-gil,https://github.com/python/cpython/issues/126314,2024-11-01,closed,2025-03-14,interpreter-core;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nThis crash only happens on a no-gil build (only debug tested) with `PYTHON_GIL=0`. \n\n```python\n# This segfaults with PYTHON_GIL=0, works with PYTHON_GIL=1\nfrom threading import Thread\nimport tracemalloc\n\nalive = [\n    Thread(target=tracemalloc.take_snapshot, args=()),\n    Thread(target=tracemalloc.clear_traces, args=()),\n]...",,Segfault/Crash,3.13;3.14,
126315,`tracemalloc` aborts when run from threads in no-gil,https://github.com/python/cpython/issues/126315,2024-11-01,open,,interpreter-core;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to get two different aborts from failed assertions, only with `PYTHON_GIL=0`, using the code below:\n\n```python\nfrom threading import Thread\nimport _tracemalloc\n\nalive = [\n    Thread(target=_tracemalloc.start, args=(\n        (memoryview(bytearray(b""abc\xe9\xff"")),))),\n    Thread(target=_tracemalloc.start, args=()),\n    Thread(target=_tracemalloc.get_traceback_limit, args=()),...",,Abort/AssertionError,3.13;3.14,
126316,`grp` is not thread safe,https://github.com/python/cpython/issues/126316,2024-11-01,closed,2024-11-21,extension-modules;type-crash;topic-subinterpreters;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to crash `grp` in a no-gil build by repeatedly calling functions in threads, it only happens with `PYTHON_GIL=0`.\n\n```python\nfrom threading import Thread\nimport grp\n\nfor x in range(5000):\n    alive = [\n        Thread(target=grp.getgrgid, args=(1,)),\n        Thread(target=grp.getgrall),\n        Thread(target=grp.getgrnam, args=('root',)),...",,,3.13;3.14,
126341,`SystemError` from calling `__iter__` on a released `memoryview`,https://github.com/python/cpython/issues/126341,2024-11-03,closed,2024-11-13,interpreter-core;easy;type-crash;3.12;3.13;3.14,ritvikpasham,,"# Crash report\n\n### What happened?\n\nThe code below causes a `SystemError` on all tested Python versions in Windows and Linux. In a no-gil debug build of main, besides the expected abort, sometimes a segfault occurs.\n\n```python\nfrom threading import Thread\n\nav = memoryview(b""something"")\nav.release()\n\nalive = [\n    Thread(target=av.release, args=('/bin/sh')),\n    Thread(target=av.__iter__, args=())...",,SystemError,3.12;3.13;3.14,
126366,Abort in free-threaded build due to mutation of `ChainMap` of a `Counter` in threads,https://github.com/python/cpython/issues/126366,2024-11-03,closed,2025-04-18,interpreter-core;type-crash;3.13;topic-free-threading;3.14,,,"### What happened?\n\nThe code below, in a no-gil debug build with `PYTHON_GIL=0`, results in the following abort:\n```\npython: ./Include/internal/pycore_stackref.h:99: _PyStackRef_FromPyObjectSteal: Assertion `obj != NULL' failed.\nAborted\n```\n\n```python\nfrom threading import Thread\nfrom collections import ChainMap, Counter\n\ncounter = Counter(range(100))\nchainmap = ChainMap(counter)\nchainmap2 = ChainMap(counter)...",,Abort/AssertionError,3.13;3.14,
126455,Calling many methods on `_ssl._SSLSocket()` segfaults,https://github.com/python/cpython/issues/126455,2024-11-05,closed,2024-11-06,extension-modules;type-crash;topic-SSL;3.12;3.13;3.14,ZeroIntensity,,"# Crash report\n\n### What happened?\n\nCalling many different methods on a `_ssl._SSLSocket()` instance causes a segfault, for example:\n```python\nimport _ssl\ns = _ssl._SSLSocket()\ns.shutdown()\n# Segmentation fault\n```\n\nOther methods known to segfault are `do_handshake`, `get_channel_binding`, `get_verified_chain` (but not `get_unverified_chain`), `getpeercert`, `read`, `verify_client_post_handshake`, `write`. Backtrace looks like:\n```gdb\n#0  0x00007ffff7b89129 in SSL_shutdown () from /lib/x86_64-linux-gnu/libssl.so.3...",,Segfault/Crash,3.12;3.13;3.14,
126456,`_pyrepl._minimal_curses.tigetstr` segfaults,https://github.com/python/cpython/issues/126456,2024-11-05,closed,2024-11-13,type-crash;3.13;3.14;topic-repl,,,"# Crash report\n\n### What happened?\n\nCalling `tigetstr` from the `_pyrepl._minimal_curses` module segfaults, on free-threading or normal builds:\n\n```\npython -c ""from _pyrepl._minimal_curses import tigetstr; tigetstr('')""\nSegmentation fault\n```\nIt happens in the return line of the function, on access of the `.value` attribute:\n\nhttps://github.com/python/cpython/blob/5e9168492f12c579b2481f3f3e0ae11f9d986857/Lib/_pyrepl/_minimal_curses.py#L55-L61\n\nBacktrace looks like:...",,Segfault/Crash,3.13;3.14,
126461,Calling `_pickle.load` with a `MagicMock` results in `SystemError`/aborts,https://github.com/python/cpython/issues/126461,2024-11-05,closed,2024-11-06,extension-modules;type-crash;3.12;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nCalling `_pickle.load(MagicMock())` with a results in an abort in debug builds and a `SystemError` in non-debug.\n\nIn debug builds:\n```python\npython -c ""from unittest.mock import MagicMock as MM; from _pickle import load;\n load(MM())""\npython: Objects/typeobject.c:5583: _PyType_LookupRef: Assertion `!PyErr_Occurred()' failed.\nAborted\n```\n\n...",,Abort/AssertionError,3.12;3.13;3.14,
126594,"Failed assertion in typeobject.c::wrap_buffer for `b"""".__buffer__(-2**31 - 1)`",https://github.com/python/cpython/issues/126594,2024-11-08,closed,2024-11-24,interpreter-core;type-crash;3.12;3.13;3.14,JelleZijlstra,,"# Crash report\n\n### What happened?\n\nCalling `bytes_object.__buffer__(large_negative_number)` in a debug build aborts with this message:\n\n```python\n>>> b"""".__buffer__(-2**31 - 1)\npython: Objects/typeobject.c:9321: wrap_buffer: Assertion `_Py_STATIC_CAST(Py_ssize_t, _Py_STATIC_CAST(int, (flags))) == (flags)' failed.\nAborted\n```\n\nFound using fusil by @vstinner.\n\n### CPython versions tested on:...",,Abort/AssertionError,3.12;3.13;3.14,
126595,Failed assertion in `itertoolsmodule.c: itertools_count_impl` for `count(sys.maxsize)`,https://github.com/python/cpython/issues/126595,2024-11-08,closed,2024-11-12,interpreter-core;type-crash;3.12;3.13;3.14,picnixz,,"# Crash report\n\n### What happened?\n\nCalling `itertools.count(sys.maxsize)` aborts with the following message:\n\n```\npython -c ""from sys import maxsize; from itertools import count; count(maxsize)""\npython: ./Modules/itertoolsmodule.c:3325: itertools_count_impl: Assertion `(cnt != PY_SSIZE_T_MAX && long_cnt == NULL && fast_mode) || (cnt == PY_SSIZE_T_MAX && long_cnt != NULL && !fast_mode)' failed.\nAborted (core dumped)\n```\n\nFound using fusil by @vstinner.\n\n### CPython versions tested on:...",,Abort/AssertionError,3.12;3.13;3.14,
126644,`_interpreters` is not thread safe on the free-threaded build,https://github.com/python/cpython/issues/126644,2024-11-10,closed,2025-01-11,extension-modules;type-crash;topic-subinterpreters;3.13;topic-free-threading;3.14,ZeroIntensity,,"# Crash report\n\n### What happened?\n\nFirst off, sorry for not being able to offer code that is more reduced and certain to trigger a repro.\n\nThe code below non-deterministically triggers `python: Python/index_pool.c:92: heap_pop: Assertion 'heap->size > 0' failed.` in a free-threading build with `PYTHON_GIL=0`.\n\n```python\nimport _interpreters\nfrom threading import Thread\n\ndef f(): pass\n\nints = []...",,,3.13;3.14,
126654,`_interpreters.exec` with invalid parameters segfaults,https://github.com/python/cpython/issues/126654,2024-11-10,closed,2024-11-11,extension-modules;type-crash;topic-subinterpreters,sobolevn,,"# Crash report\n\n### What happened?\n\nThe code below segfaults on non-debug builds and aborts on debug builds.\n\n```python\nimport _interpreters\n\n_interpreters.exec(False, ""aaaa"", 1)\n```\n\nThe abort looks like:\n```\npython: ./Modules/_interpretersmodule.c:462: _run_in_interpreter: Assertion `!PyErr_Occurred()' failed....",,Segfault/Crash,,
126876,Assertion failure for `socket` with too large default timeout (larger than INT_MAX),https://github.com/python/cpython/issues/126876,2024-11-15,closed,2024-12-14,extension-modules;type-crash;3.12;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nA debug build will abort when calling `socket._fallback_socketpair()` after a call to `socket.setdefaulttimeout` with too high a value:\n\n```python\npython -c ""import socket; socket.setdefaulttimeout(2**31) ; socket._fallback_socketpair()""\npython: ./Modules/socketmodule.c:819: internal_select: Assertion `ms <= INT_MAX' failed.\nAborted (core dumped)\n```\nFound using fusil by @vstinner.\n\n### CPython versions tested on:\n...",,Abort/AssertionError,3.12;3.13;3.14,
126881,Segfault with `asyncio.base_events.BaseEventLoop` when passed a small float to `set_debug`.,https://github.com/python/cpython/issues/126881,2024-11-15,closed,2024-11-29,interpreter-core;type-crash;3.12;3.13;3.14,kumaraditya303,,# Crash report\n\n### What happened?\n\nIt's possible to segfault the interpreter by passing a small float as the `enabled` parameter of `asyncio.base_events.BaseEventLoop.set_debug()`:\n\n```python\nimport asyncio.base_events\n\nobj = asyncio.base_events.BaseEventLoop()\nobj.set_debug(0.0005)\nobj._run_forever_setup()\n```\nFound using fusil by @vstinner.\n...,,Segfault/Crash,3.12;3.13;3.14,
126884,Calling `cProfile.runctx` in threads on a free-threading build segfaults,https://github.com/python/cpython/issues/126884,2024-11-15,open,,extension-modules;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nOn a no-gil build running with `PYTHON_GIL=0`, repeatedly calling `cProfile.runctx` in threads leads to a segfault:\n\n```python\nfrom threading import Thread\nimport cProfile\n\nfor x in range(100):\n    Thread(target=cProfile.runctx, args=("""", {}, {}, """",)).start()\n```\n\nBacktrace:...",,Segfault/Crash,3.13;3.14,
126895,Segfault/aborts calling `readline.set_completer_delims` in threads in a free-threaded build,https://github.com/python/cpython/issues/126895,2024-11-16,closed,2025-03-17,stdlib;extension-modules;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nCalling `difflib._test` in threads in a free-threaded build (with `PYTHON_GIL=0`) will result in aborts or segfaults, apparently related to memory issues:\n\n```python\nfrom threading import Thread\nimport difflib\n\nfor x in range(100):\n    Thread(target=difflib._test, args=()).start()\n```\n\nSegfault backtrace:...",,Segfault/Crash,3.13;3.14,
126907,Running `atexit` from threads in free-threading build segfaults,https://github.com/python/cpython/issues/126907,2024-11-16,closed,2024-12-16,extension-modules;type-crash;3.13;topic-free-threading;3.14,ZeroIntensity,,# Crash report\n\n### What happened?\n\nIt's possible to segfault or abort a no-gil interpreter running with `PYTHON_GIL=0` by calling `atexit` functions from threads:\n\n```python\nfrom threading import Thread\nimport atexit\n\ndef g():\n    pass\n\ndef f():\n    for x in range(100):...,,Segfault/Crash,3.13;3.14,
127085,Calling `ShareableList.count` in threads aborts: `Assertion 'self->exports == 0' failed`,https://github.com/python/cpython/issues/127085,2024-11-21,closed,2024-12-16,interpreter-core;type-crash;topic-multiprocessing;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort the interpreter by calling `multiprocessing.shared_memory.ShareableList.count` in threads with `PYTHON_GIL=0` in a debug build:\n\n```python\nimport gc\nimport multiprocessing.shared_memory\nfrom threading import Thread\n\nobj = multiprocessing.shared_memory.ShareableList(""Uq..SeDAmB+EBrkLl.SG.Z+Z.ZdsV..wT+zLxKwdN\b"")\n\nfor x in range(10):\n    Thread(target=obj.count, args=(1,)).start()...",,Abort/AssertionError,3.13;3.14,
127165,Segfault in invalid `concurrent.futures.interpreter.WorkerContext`,https://github.com/python/cpython/issues/127165,2024-11-22,closed,2024-12-01,extension-modules;type-crash;topic-subinterpreters;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to segfault the interpreter by calling `initialize()` on a `concurrent.futures.interpreter.WorkerContext` instance that was created with the `shared` argument being a dict containing the null byte as a key:\n\n```python\npython -c ""import concurrent.futures.interpreter; w = concurrent.futures.interpreter.WorkerContext(0, {'\x00': ''}).initialize()""\n```\n\nThis doesn't require threads or free-threading. It can be traced to the `_interpreters` module:\n```python\nimport _interpreters\n_interpreters.create()\n_interpreters.set___main___attrs(1, {""\x00"": 1}, restrict=True)...",,Segfault/Crash,3.13;3.14,
127182,Assertion failure from `StringIO.__setstate__`,https://github.com/python/cpython/issues/127182,2024-11-23,closed,2024-11-25,extension-modules;type-crash;3.13;3.14,sobolevn,,"# Crash report\n\n### What happened?\n\nIt's possible to abort the interpreter by calling `StringIO.__setstate__` with a non-string `initial_value`:\n\n```python\npython -c ""from io import StringIO; StringIO().__setstate__((None, '', 0, {}))""\npython: Objects/unicodeobject.c:2542: as_ucs4: Assertion `PyUnicode_Check(string)' failed.\nAborted (core dumped)\n```\n\nInterestingly, on a non-debug build passing an int as `initial_value` gives an error message saying that `None` should be a valid value:\n```python\npython -c ""from io import StringIO; StringIO().__setstate__((1, '', 0, {}))""...",,Abort/AssertionError,3.13;3.14,
127190,Segfault from `asyncio.events._running_loop.__setattr__` with invalid name,https://github.com/python/cpython/issues/127190,2024-11-23,closed,2024-11-28,extension-modules;type-crash;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to segfault the interpreter by calling `asyncio.events._running_loop.__setattr__` with a special class as `name`, as in this example:\n\n```python\nimport asyncio.events\n\nclass Liar1:\n    def __eq__(self, other):\n        return True\n\nasyncio.events._running_loop.__setattr__(Liar1(), type)\n...",,Segfault/Crash,3.13;3.14,
127192,Segfault or abort in free-threaded build calling methods from exception in threads,https://github.com/python/cpython/issues/127192,2024-11-23,closed,2024-11-23,interpreter-core;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nIn a no-gil build with `PYTHON_GIL=0`, it's possible to get the interpreter to segfault or abort with the message `Fatal Python error: PyMutex_Unlock: unlocking mutex that is not locked` by running the following code:\n\n```python\nfrom threading import Thread\nimport email.errors\n\nalive = []\nfor x in range(100):\n    obj = email.errors.InvalidMultipartContentTransferEncodingDefect()\n\n    alive.append(Thread(target=obj.__getstate__, args=()))...",,Segfault/Crash,3.13;3.14,
127196,`_interpreters.exec` with invalid dict as `shared` segfaults,https://github.com/python/cpython/issues/127196,2024-11-23,closed,2025-01-09,extension-modules;type-crash;topic-subinterpreters;3.13;3.14,sobolevn,,"# Crash report\n\n### What happened?\n\nPassing a dict with an invalid key as the `shared` parameter to `_interpreters.exec` segfaults the interpreter (or aborts in a debug build):\n\n```python\nimport _interpreters\n_interpreters.exec(0, ""1"", {""\uFD7C\u5124\u7B91\u92E9\u1850\u39AA\u0DF2\uD82A\u2D68\uACAD\u92DE\u47C5\uFFD0\uDE0B\uAA9C\u2C17\\u6577\u4C92\uD37C"": 0})\n```\nBacktrace:\n```gdb\n#0  0x00005555557c496c in _PyXI_ApplyError (error=0x0) at Python/crossinterp.c:1056\n#1  0x00007ffff79db822 in _run_in_interpreter (p_excinfo=0x7fffffffd820, flags=1,\n    shareables=0x7ffff7a186c0, codestrlen=<optimized out>, codestr=0x555555aceff8 <_PyRuntime+76888> ""1"",...",,Segfault/Crash,3.13;3.14,
127208,`ExtensionFileLoader.load_module` aborts when initialized with a path containing null-bytes,https://github.com/python/cpython/issues/127208,2024-11-24,closed,2024-11-29,interpreter-core;type-crash;topic-importlib;3.12;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort a debug build by initializing a `_frozen_importlib_external.ExtensionFileLoader` with a path containing null-bytes, then calling `load_module()`:\n\n```python\nimport _frozen_importlib_external\n\n_frozen_importlib_external.ExtensionFileLoader(""a"", ""\x00"").load_module(None)\n```\nAbort message:\n```\npython: Python/import.c:939: hashtable_key_from_2_strings: Assertion `strlen(key) == size - 1' failed.\nAborted...",,Abort/AssertionError,3.12;3.13;3.14,
127234,Assertion failures from `_interpchannels._register_end_types` ,https://github.com/python/cpython/issues/127234,2024-11-24,open,,extension-modules;type-crash;topic-subinterpreters;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort a debug build by calling `_interpchannels._register_end_types`  with invalid values:\n\n```python\nimport _interpchannels\n\n_interpchannels._register_end_types(int, int)\n```\nAbort on 3.13:\n```\npython: Python/crossinterp_data_lookup.h:260: _PyCrossInterpreterData_RegisterClass: Assertion `matched->getdata == getdata' failed.\nAborted...",,Abort/AssertionError,3.13;3.14,
127235,Failed assertion in `Python/legacy_tracing.c:431` on a free-threading build,https://github.com/python/cpython/issues/127235,2024-11-24,open,,type-crash;topic-free-threading,,,"# Crash report\n\n### What happened?\n\nIt's possible to cause an abort on `!_PyMem_IsPtrFreed(tstate)` while running with `PYTHON_GIL=0` by calling the following code:\n```python\nimport threading\n\ndef errback(*args, **kw):\n    raise ValueError('error')\n\nfor x in range(200):\n    threading._start_joinable_thread(errback)\n    try:\n        threading.setprofile_all_threads("""")...",,Abort/AssertionError,,
127316,[FreeThreading] object_set_class() fails with an assertion error in _PyCriticalSection_AssertHeld(),https://github.com/python/cpython/issues/127316,2024-11-27,closed,2024-11-29,interpreter-core;type-crash;topic-free-threading,kumaraditya303,,"# Crash report\n\n### What happened?\n\nOn a free-threaded debug build, even with `PYTHON_GIL=1`, it's possible to abort the interpreter by calling `_DummyThread._after_fork` after a `__reduce__` call:\n\n```python\nimport threading\n\nobj = threading._DummyThread()\nres = obj.__reduce__()\nres = obj._after_fork(1)\n```\nAbort message:\n```...",,Abort/AssertionError,,
127603,Abort from `GenericAlias.__sizeof__`: `ob->ob_type != &PyLong_Type`,https://github.com/python/cpython/issues/127603,2024-12-04,closed,2024-12-11,interpreter-core;type-crash;3.12,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort the interpreter in 3.12 by calling `__sizeof__` of a `GenericAlias` instance:\n\n```python\nfrom types import GenericAlias\n\ng = GenericAlias(BaseException, Exception)\ng.__sizeof__(1)\n```\nAbort message:\n```\npython: ./Include/object.h:231: Py_SIZE: Assertion `ob->ob_type != &PyLong_Type' failed....",,Abort/AssertionError,3.12,
127836,Assertion failure on finalization with `_lsprof` and `asyncio` in 3.12,https://github.com/python/cpython/issues/127836,2024-12-11,closed,2025-02-23,topic-asyncio;type-crash;3.12,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort the interpreter in 3.12 during finalization by having a mix of enabled `_lsprof` and `asyncio` with very specific details:\n\n```python\nimport asyncio\nimport _lsprof\n\nobj = _lsprof.Profiler()\nobj.enable()\nobj._pystart_callback(lambda: 0, 0)\nobj = None  # Required\n...",,Abort/AssertionError,3.12,
127870,Segfaults in ctypes _as_parameter_ handling when called with `MagicMock`,https://github.com/python/cpython/issues/127870,2024-12-12,closed,2024-12-13,topic-ctypes;type-crash,,,"# Crash report\n\n### What happened?\n\nIt's possible to segfault the interpreter by calling any of the 3 functions below with `MagicMock` as argument. It takes a long time to trigger the crash (up to 3 minutes in my slow machine).\n\n```python\nfrom unittest.mock import MagicMock\nimport _pyrepl._minimal_curses\n\nobj = _pyrepl._minimal_curses.tparm(MagicMock(), 0, 0, 0, 0, 0, 0, 0)\nobj = _pyrepl._minimal_curses.setupterm(MagicMock(), 0)\nobj = _pyrepl._minimal_curses.tigetstr(MagicMock())\n```\n...",,Segfault/Crash,,
129573,Failed assertion in `_PyUnicode_Equal` from `calculate_suggestions` with non-string candidate,https://github.com/python/cpython/issues/129573,2025-02-02,open,,interpreter-core;type-crash;3.12;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nThe interpreter will abort if `runpy._run_module_code` is called with invalid values:\n```python\nimport runpy\nrunpy._run_module_code(""A"", {0: """"}, """")\n```\n\nAnother way to trigger:\n```python\nclass Parent:\n    def __dir__(self):\n        return [0]...",,Abort/AssertionError,3.12;3.13;3.14,
129766,Fatal Python error from `warnings._release_lock()`,https://github.com/python/cpython/issues/129766,2025-02-07,closed,2025-02-07,type-crash,sobolevn,,# Crash report\n\n### What happened?\n\nExposing the mutex  used by the `_warnings` module in https://github.com/python/cpython/pull/128386 has made it possible to abort the interpreter by calling `warnings._release_lock()`:\n\n```python\nimport warnings\nwarnings._release_lock()\n```\n\nError message:\n```\nFatal Python error: _PyRecursiveMutex_Unlock: unlocking a recursive mutex that is not owned by the current thread\nPython runtime state: initialized...,,Fatal Python Error,,
131580,Faulthandler segfaults when called from threads,https://github.com/python/cpython/issues/131580,2025-03-22,closed,2025-03-25,extension-modules;type-crash,,,"# Crash report\n\n### What happened?\n\nIn a GILfull build of main, it's rarely possible to get faulthandler to segfault when calling it from threads. ~~Since it's a rare crash and I'm on mobile, no reduced test case is available at the moment.~~\n\nHere's the traceback:\n```gdb\n#0  _PyFrame_GetCode (f=0xfffff7fea1f0) at ./Include/internal/pycore_frame.h:94\n#1  dump_frame (fd=fd@entry=2, frame=frame@entry=0xfffff7fea1f0)\n    at Python/traceback.c:914\n#2  0x000000000076254c in dump_traceback (fd=fd@entry=2,\n    tstate=tstate@entry=0xaeb528 <_PyRuntime+329832>,\n    write_header=write_header@entry=0) at Python/traceback.c:1007\n#3  0x0000000000762710 in _Py_DumpTracebackThreads (fd=2,...",,Segfault/Crash,,
131998,The interpreter crashes when specializing bound method calls on unbound objects,https://github.com/python/cpython/issues/131998,2025-04-02,closed,2025-04-08,interpreter-core;release-blocker;type-crash;3.13;3.14,,,"# Crash report\n\n### What happened?\n\nThe following code segfaults the interpreter:\n\n```python\nimport glob\n\nfor x in range(3):\n    str_globber = glob._StringGlobber(None, None)\nstr_globber.selector(set())\n\ntry:\n    str_globber.selector([True, True, False])...",,Segfault/Crash,3.13;3.14,
132002,Segfault deallocating a `ContextVar` built with `str` subclass,https://github.com/python/cpython/issues/132002,2025-04-02,closed,2025-04-02,extension-modules;type-crash;3.12;3.13;3.14,sobolevn,,"# Crash report\n\n### What happened?\n\nCreating a `ContextVar` with an instance of a subclass of `str` leads to a segfault during its deallocation:\n\n```python\nfrom _contextvars import ContextVar\n\nclass weird_str(str):\n    def __eq__(self, other):\n        pass\n\nContextVar(weird_str())\n```...",,Segfault/Crash,3.12;3.13;3.14,
132011,Failed assertion in `_PyEval_EvalFrameDefault`: `self_o != NULL`,https://github.com/python/cpython/issues/132011,2025-04-02,closed,2025-04-06,interpreter-core;type-crash,sobolevn,,"# Crash report\n\n### What happened?\n\nIt's possible to make the interpreter exit with a failed assertion by running the following code:\n\n```python\nimport difflib\n\nobj = difflib.HtmlDiff(None, None, None, None,)\n\ntry:\n    for x in range(3):\n        obj._split_line([], None, None)\nexcept:...",,Abort/AssertionError,,
132171,Assertion failure calling `_interpreters.run_string` with a string subclass instance,https://github.com/python/cpython/issues/132171,2025-04-06,closed,2025-04-07,extension-modules;type-crash;topic-subinterpreters,sobolevn,,"# Crash report\n\n### What happened?\n\nIt's possible to make the interpreter abort by calling `_interpreters.run_string` with an instance of a subclass of `str` as the `script` argument:\n\n```python\nimport _interpreters\n\nclass weird_str(str): pass\n    \n_interpreters.create()\n_interpreters.run_string(1, weird_str('1'))\npython: ./Modules/_interpretersmodule.c:333: get_code_str: Assertion `PyUnicode_CheckExact(arg) && (check_code_str((PyUnicodeObject *)arg) == NULL)' failed.\nAborted (core dumped)...",,Abort/AssertionError,,
132176,Abort when using a tuple subclass instance as the `bases` parameter for `type`,https://github.com/python/cpython/issues/132176,2025-04-06,closed,2025-04-15,interpreter-core;type-crash,sobolevn,,"# Crash report\n\n### What happened?\n\nThe interpreter will abort when a new type is created using an instance of a subclass of `tuple` as the `bases` parameter due to a `PyTuple_CheckExact(bases)` assertion:\n```python\nclass weird_tuple(tuple): pass\n\nc = type(""c"", weird_tuple((str,)), {})\npython: Objects/typeobject.c:500: set_tp_bases: Assertion `PyTuple_CheckExact(bases)' failed.\nAborted (core dumped)\n```\n\nFound using [fusil](https://github.com/devdanzin/fusil) by @vstinner.\n...",,Abort/AssertionError,,
132250,`_ccall_callback` method of `_lsprof.Profiler` causes Fatal Python error,https://github.com/python/cpython/issues/132250,2025-04-08,closed,2025-04-08,extension-modules;type-crash,,,"# Crash report\n\n### What happened?\n\nWhen a `_lsprof.Profiler` is enabled and a `TypeError` is raised from mismatching descriptor and target, a Fatal Python error happens due to `_ccall_callback ` returning a result with an exception set:\n\n```python\nimport _lsprof\n\nprof = _lsprof.Profiler()\nprof.enable()\n\ndef mismatch(first, second):\n    first.find(second())\n...",,Fatal Python Error,,
132296,Concurrent deallocation of threads while calling `PyEval_SetTrace`,https://github.com/python/cpython/issues/132296,2025-04-09,open,,interpreter-core;type-crash;topic-C-API;topic-free-threading,,,# Crash report\n\n### What happened?\n\nThe following code will cause the interpreter to abort in a no-gil build:\n```python\nimport threading\n\nfor x in range(1000):\n    threading._start_joinable_thread(lambda: None)\n    try:\n        threading.settrace_all_threads(())\n    except Exception:\n        pass\n```...,,,,
132386,Segfault or failed assertion (`obj != NULL`) in `PyStackRef_FromPyObjectSteal`,https://github.com/python/cpython/issues/132386,2025-04-11,closed,2025-04-11,interpreter-core;type-crash,tomasr8,,"# Crash report\n\n### What happened?\n\nIt's possible to segfault or abort the interpreter with the following code:\n\n```python\nclass WeirdDict(dict): pass\n\nns = {}\nexec(""def __create_fn__():\n return a"", WeirdDict({None: None}), ns)\nns['__create_fn__']()\n```\n\nSegfault backtrace:...",,Segfault/Crash,,
132461,Abort from calling `OrderedDict.setdefault` with an invalid value,https://github.com/python/cpython/issues/132461,2025-04-13,open,,interpreter-core;type-crash,,,"# Crash report\n\n### What happened?\n\nIt's possible to abort the interpreter by passing a class that has invalid, changing hash values to `OrderedDict.setdefault`:\n\n```python\nfrom abc import ABCMeta\nfrom random import randint\n\nlarge_num = 2**64\nclass WeirdBase(ABCMeta):\n  def __hash__(self):\n    return randint(0, large_num)\n...",,Abort/AssertionError,,
132551,Segfault/abort from calling `BytesIO` `unshare_buffer` in threads on a free-threaded build,https://github.com/python/cpython/issues/132551,2025-04-15,closed,2025-05-08,extension-modules;type-crash;3.13;topic-free-threading;3.14,,,"# Crash report\n\n### What happened?\n\nThis seems to be almost the same issue as https://github.com/python/cpython/issues/111174, but for free-threaded builds.\n\nIn a free-threaded build it's possible to segfault (rare on debug build) or abort (common on debug build) the interpreter with the following code (which might not be minimal, I'll try to reduce it further later today):\n\n```python\nfrom io import BytesIO\nfrom threading import Thread\nfrom time import sleep\n\n\ndef call_getbuffer(obj: BytesIO) -> None:...",,Segfault/Crash,3.13;3.14,
132707,Segfault in free-threaded build from interaction of nested list/tuple repr,https://github.com/python/cpython/issues/132707,2025-04-18,closed,2025-04-18,interpreter-core;type-crash;topic-free-threading,,,"# Crash report\n\n### What happened?\n\nIt's possible to segfault or abort a free-threaded build with the following code, not sure the same issue accounts for both:\n\n```python\nimport sys\n\n# Not sure what this weird_cls dance is doing, but it seems necessary somehow\nclass weird_cls(int): pass\nweird_instances = {""weird_int_empty"": weird_cls()}\nweird_classes = {""weird_int"": weird_cls}\nweird_instances[""weird_int_10**default_max_str_digits+1""] = weird_classes[""weird_int""](10 ** (sys.int_info.default_max_str_digits + 1))\n...",,Segfault/Crash,,
132713,Segfault in `union_repr` from `list_repr_impl` in free-threaded build,https://github.com/python/cpython/issues/132713,2025-04-19,closed,2025-04-23,interpreter-core;type-crash;topic-typing;3.13;topic-free-threading;3.14,sobolevn,,# Crash report\n\n### What happened?\n\nCalling `repr` in many threads on a list containing a large `typing.Union` segfaults in a free-threaded build:\n\n```python\nimport abc\nimport builtins\nimport collections.abc\nimport itertools\nimport types\nimport typing\nfrom functools import reduce\nfrom operator import or_...,,Segfault/Crash,3.13;3.14,
133441,3.13: Abort from failed assertion in `_PyEval_EvalFrameDefault`,https://github.com/python/cpython/issues/133441,2025-05-05,open,,interpreter-core;type-crash;3.13,,,# Crash report\n\n### What happened?\n\nIt's possible to abort a 3.13 debug build running the following code:\n\n```python\nimport copy\n\nclass Node:\n    def __init__(self):\n        self._parents = {}\n\n    def __getstate__(self):\n        return {'_parents': {}}...,,Abort/AssertionError,3.13,
